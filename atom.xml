<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凯子哥的博客</title>
  <subtitle>专注Android开发与技术分享，关注产品、营销与用户体验</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaizige.vip/"/>
  <updated>2016-09-05T12:14:37.000Z</updated>
  <id>http://kaizige.vip/</id>
  
  <author>
    <name>赵凯强</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【设计模式】策略模式</title>
    <link href="http://kaizige.vip/2016/09/05/strategy-pattern/"/>
    <id>http://kaizige.vip/2016/09/05/strategy-pattern/</id>
    <published>2016-09-05T12:09:18.000Z</published>
    <updated>2016-09-05T12:14:37.000Z</updated>
    
    <content type="html">&lt;p&gt;凯子哥到新公司入职的第一天，就被老板交到了办公室。&lt;/p&gt;
&lt;p&gt;老板说：“凯子啊，听说你最近在研究设计模式呀，有什么收获吗？”&lt;/p&gt;
&lt;p&gt;凯子说：“刚把《Head First设计模式》看了一遍，之前还看过《Android设计模式解析与实战》，多多少少知道一些。”&lt;/p&gt;
&lt;p&gt;老板说：“挺好学的呀，这两本书都挺不错的，既然都看过了，今天给你一个新需求，你帮我实现下吧！”&lt;/p&gt;
&lt;p&gt;凯子高兴的说：“好啊，正好可以练练手！能把需求具体说下吗？”&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;老板说：“需求很简单，我们在做一个离线版的内容阅读软件，所有的数据都存储在本地数据库，你需要帮我写一个获取《每日一篇》数据的工具类，咱们一共有三个频道，分别是《糗事百科》、《煎蛋》和《夫妻夜话》，每个频道都有一个名称ChannelName和一个内部的数据库代号DataSource来区分来源，通过DataSource和当天的日期可以在数据库查询到唯一的一条数据DailyData，用户可以通过切换这三个频道来选择阅读其中某个频道的内容。好啦，就是这么多，你去做吧！”&lt;/p&gt;
&lt;p&gt;凯子说：“得令！小的这就去写代码！”&lt;/p&gt;
&lt;p&gt;回到工位上，凯子心想，这还不简单？根本不用想，上手就来！&lt;/p&gt;
&lt;p&gt;凯子哥首先整理了下需求，大约需要以下几个接口：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取所有的频道名称，用于给用户展示所有的频道&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据用户点击的频道名称，获取对应的DataSource，用于获取数据(其实这个设计并不好，通过DataSource将所有的数据绑起来，缺乏灵活性，如果直接以ChannelName来作为来源区分，代码上会简单很多。这里就不过多追究了)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据当天的日期和选中频道的DataSource就可以去数据库类DailyDateDB中取得对应的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需求确定了，剩下的就是编码了！&lt;/p&gt;
&lt;p&gt;于是凯子哥编写了一个工具类DailyDataUtil来解决这一切。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class DailyDataUtil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_ILLEGAL = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_QIUBAI = 1; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_IANDAN = 2; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_FUQIYEHUA = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_QIUBAI = &amp;quot;糗事百科&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_JIANDAN = &amp;quot;煎蛋&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_FUQIYEHUA = &amp;quot;夫妻夜话&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static DailyData getDailyDate(String date, int dataSource) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             return DailyDateDB.getDailyDate(date, dataSource); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public static List&amp;lt;String&amp;gt; getAllChannelName() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return Arrays.asList(CHANNEL_QIUBAI, CHANNEL_JIANDAN, CHANNEL_FUQIYEHUA); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public static int getDataSource(String channelName) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (CHANNEL_QIUBAI.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_QIUBAI;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else if (CHANNEL_JIANDAN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_IANDAN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_FUQIYEHUA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;做完之后，凯子就让老板review了下，老板看了下说：“可以，先这样做吧，没什么大问题。”&lt;/p&gt;
&lt;p&gt;于是凯子就高高兴兴的把这个类Check In了。&lt;/p&gt;
&lt;p&gt;一个月以后，老板又把凯子叫到了办公室，高兴地对凯子说：“你还记得之前做的那个阅读类App吗？现在用户很喜欢，日活已经过百万了！这个月就给你发奖金！我们现在不光要面向国内市场，我们要走出中国，走向世界，再加一个英语的数据工具类吧，如果在英文手机上，就只显示英文内容，在中文手机上，就只显示中文的内容，希望你能快速的给出一个方案！我们的千万日活和财富自由就靠你了，凯子！”&lt;/p&gt;
&lt;p&gt;凯子回到工位上，思考了一会，不就是加个英文内容吗，简单，加个if语句就得了。而且要自动的根据本地的语言切换数据源，这个也简单，只需要判断一下本地的语言就可以了。&lt;/p&gt;
&lt;p&gt;说改就改，下面是修改之后的版本：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class DailyDataUtil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_ILLEGAL = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_QIUBAI = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_IANDAN = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_FUQIYEHUA = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_QIUBAI = &amp;quot;糗事百科&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_JIANDAN = &amp;quot;煎蛋&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_FUQIYEHUA = &amp;quot;夫妻夜话&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_QIUBAI_EN = 4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_IANDAN_EN = 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int DATA_SOURCE_FUQIYEHUA_EN = 6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_QIUBAI_EN = &amp;quot;QiuShiBaiKe&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_JIANDAN_EN = &amp;quot;JianDan&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final String CHANNEL_FUQIYEHUA_EN = &amp;quot;FuQiYeHua&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static DailyData getDailyDate(String date, int dataSource) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return DailyDateDB.getDailyDate(date, dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static List&amp;lt;String&amp;gt; getAllChannelName(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isEnLanguage(context)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return Arrays.asList(CHANNEL_QIUBAI_EN, CHANNEL_JIANDAN_EN, CHANNEL_FUQIYEHUA_EN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return Arrays.asList(CHANNEL_QIUBAI, CHANNEL_JIANDAN, CHANNEL_FUQIYEHUA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static int getDataSource(Context context, String channelName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (TextUtils.isEmpty(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_ILLEGAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isEnLanguage(context)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (CHANNEL_QIUBAI_EN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_QIUBAI_EN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else if (CHANNEL_JIANDAN_EN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_IANDAN_EN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_FUQIYEHUA_EN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (CHANNEL_QIUBAI.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_QIUBAI;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else if (CHANNEL_JIANDAN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_IANDAN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return DATA_SOURCE_FUQIYEHUA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static boolean isEnLanguage(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return context.getResources().getConfiguration().locale.getLanguage().equalsIgnoreCase(&amp;quot;en&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的代码可以看出，为了判断本地的语言环境，我们传入了一个Context对象，这使得我们修改了方法参数，那么我们就必须修改所有调用这个方法的地方，这是非常危险的，因为其他经过测试的代码有可能会带入BUG。其实我们也可以在Application初始化的时候就取得当前的语言环境，然后通过静态方法对外部暴露，这里我们就不再赘述。&lt;/p&gt;
&lt;p&gt;除此之外，为了增加一个英文版本的内容，我们可以发现，除了getDailyDate()外，其他方法也都改动了，这也会增加已有代码的风险，而且增加的很多if判断，使得整个代码的可读性变差。&lt;/p&gt;
&lt;p&gt;“算了，算了，先发布再说吧！老板着急要呢！”于是凯子就把代码Check In了，新版本顺利发布，凯子回家睡了一个好觉。&lt;/p&gt;
&lt;p&gt;又过了一个月，早上一进门，老板就兴奋的指着GA后台的用户增长曲线对凯子说：“凯子，你看！咱们的日活已经过200W了！看来这个App很有潜力呀！(废话，2个月就到200W的日活，傻子也能看出来)咱们要做一款国际化的大App了！我决定咱们暂时增加西班牙语、葡语、印度语、日语、韩语的内容！你快去做吧！今天晚上咱们就上线！”&lt;/p&gt;
&lt;p&gt;回到工位后，一想到以后还有可能适配全球N种语言，凯子坐在座位上傻掉了。&lt;/p&gt;
&lt;p&gt;一个小时以后(有可能思考的时候睡着了)，凯子眼前一亮，嘴中不断的呢喃着：”策略！策略！策略模式啊！“&lt;/p&gt;
&lt;p&gt;那么，什么是策略模式呢？&lt;/p&gt;
&lt;p&gt;##策略模式的定义&lt;/p&gt;
&lt;p&gt;策略模式定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的替换独立于算法的客户。&lt;/p&gt;
&lt;p&gt;我知道这样死板的定义你不想看，那么我们就一起思考下，在这个场景下，可以使用策略模式吗？&lt;/p&gt;
&lt;p&gt;我认为，掌握策略模式最重要的就是要理解以下两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;算法族&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;什么是算法族？&lt;/p&gt;
&lt;p&gt;首先不要被这个“算法”所迷惑，不要认为只有在涉及到比较复杂的运算的时候才使用到算法，其实这里的算法随处可见，比如说上面提到的这个简单的获取每日数据的类，是不是算法呢？我认为是算的，只要涉及到逻辑的地方都有算法的存在，只不过有的简单，有的复杂罢了。&lt;/p&gt;
&lt;p&gt;那么怎么理解“族”呢？“族”就指的不是一个，就是一群，而且一定是一群具有相似的属性的事物才能是一个族，比如“汉族”。除此之外，有“族”就存在多态，就像“我是一个汉族人”，“归并排序算法是一种排序算法”，理解了这一点，就很容易理解策略模式了。&lt;/p&gt;
&lt;p&gt;那么怎么理解替换呢？既然存在多态了，如果我要一个排序算法，你给我一个归并排序算法，可不可以呢？当然可以。那我想要其他类型的排序算法可以吗？当然也可以。多态的威力就在于此，随便你怎么替换，只要能满足我的需求就ok。那么怎么替换呢？一个简单的setter就解决了。&lt;/p&gt;
&lt;p&gt;##改造代码&lt;/p&gt;
&lt;p&gt;已经简单的了解了下什么是策略模式，那么我们怎么改造一下上面的代码呢？&lt;/p&gt;
&lt;p&gt;首先我们要找出可以替换的算法族。怎么找呢？其实有一个窍门，那就是如果有很多if语句，就说明这里可以分解成很多的策略，在这里就是这两个方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static List&amp;lt;String&amp;gt; getAllChannelName(Context context)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static int getDataSource(Context context, String channelName)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;既然算法族可以替换，我们就应该提取基类，然后在子类中实现不同的算法，比如我们这里定义基类为抽象类DailyDataCapturer，它包含了上面两个可以替换的算法，以及一些常量类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public abstract class DailyDataCapturer &amp;#123; ...公共常量... protected abstract List&amp;lt;String&amp;gt; getAllChannelName(); protected abstract int getDataSource(String channelName);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子类为CNCapturer和ENCapturer&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CNCapturer extends DailyDataCapturer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public List&amp;lt;String&amp;gt; getAllChannelName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return Arrays.asList(CHANNEL_QIUBAI, CHANNEL_JIANDAN, CHANNEL_FUQIYEHUA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int getDataSource(String channelName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (CHANNEL_QIUBAI.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_QIUBAI;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (CHANNEL_JIANDAN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_IANDAN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_FUQIYEHUA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ENCapturer extends DailyDataCapturer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected List&amp;lt;String&amp;gt; getAllChannelName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return Arrays.asList(CHANNEL_QIUBAI_EN, CHANNEL_JIANDAN_EN, CHANNEL_FUQIYEHUA_EN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected int getDataSource(String channelName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (CHANNEL_QIUBAI_EN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_QIUBAI_EN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (CHANNEL_JIANDAN_EN.equalsIgnoreCase(channelName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_IANDAN_EN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return DATA_SOURCE_FUQIYEHUA_EN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了不同的算法族，剩下的就是提供可以更换的算法接口了，我们对外提供一个公共的方法类DailyDataUtil来完成相关工作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class DailyDataUtil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static DailyDataCapturer sCapturer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void init(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isEnLanguage(context)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sCapturer = new ENCapturer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sCapturer = new CNCapturer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static List&amp;lt;String&amp;gt; getAllChannelName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return sCapturer.getAllChannelName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static int getDataSource(String channelName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return sCapturer.getDataSource(channelName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static boolean isEnLanguage(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return context.getResources().getConfiguration().locale.getLanguage().equalsIgnoreCase(&amp;quot;en&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们只需要在init()中完成子类的选择，后面的所有方法就可以直接对接到合适的算法，减少了if语句的使用，使得逻辑更加的清晰。&lt;/p&gt;
&lt;p&gt;如果我们想要添加一种语言的支持，现在还很困难吗？如果是以前的结构，我们需要修改所有涉及到语言的函数，复制粘贴，然后修改成对应语言的逻辑，这样就破坏了函数的封装性，还记得那句话吗？”对修改关闭，对扩展开放“，用if语句的方式来实现不同的策略，每次增删都需要修改原有代码，很容易引入BUG，同时也使得测试的压力变大，因为之前的逻辑都被修改了。&lt;/p&gt;
&lt;p&gt;但是如果采用现在的策略模式，我们每增加一种语言的支持，我们只需要添加一个子类，然后在init()中添加子类的初始化逻辑即可，其他的任何代码不需要改动，这无疑大大提高了代码的可靠性，以前的代码不需要在进行重新测试，所以是对”对修改关闭，对扩展开放“。&lt;/p&gt;
&lt;p&gt;##优缺点总结&lt;/p&gt;
&lt;p&gt;从上面的情境中，我们可以总结出使用策略模式的优缺点。&lt;/p&gt;
&lt;p&gt;优点就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;利用继承来将需要实现的具体方法放在基类中，添加新的策略子类时，只需要继承然后完成具体实现即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以动态的替换所要使用的策略，这是利用多态实现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以减少if语句，使得代码可读性更好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点也是有的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为策略类可以无限多，所以客户必须清楚自己想用哪一个策略类来完成需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每添加一种策略就必须添加一个类，可能会使得策略类比较多&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相对于策略类带来的优势而言，这些缺点相对而言还是可以接受的，如果你的业务逻辑适合使用策略模式，那就尽情的使用吧！&lt;/p&gt;
&lt;p&gt;##应用举例&lt;/p&gt;
&lt;p&gt;在Android中策略模式最常见的应用是各种View的Adapter实现，比如ListView和RecyclerView的Adapter实现，虽然Adapter是一种很明显的适配器模式，但是想想我们在使用Adapter的过程中是否有策略模式的影子？&lt;/p&gt;
&lt;p&gt;以RecyclerView为例，首先我们必须继承RecyclerView.Adapter，然后实现下面三个方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public RecordHolder onCreateViewHolder(ViewGroup parent, int viewType) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onBindViewHolder(RecordHolder holder, int position) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public int getItemCount() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就相当于是算法族里面的可替换算法，到底返回多少个item，生成什么样的界面，都是我们的子类控制的。想想一下，假如我们有一个商品详情界面，在不同分辨率的手机上的显示元素不同，那么我们只需要在界面初始化的时候根据分辨率动态的初始化不同分辨率的的Adapter子类就可以了，这就是不同的策略，也当然是一种策略模式。&lt;/p&gt;
&lt;p&gt;除此之外，实现动画效果时的插值器也是应用了策略模式，OkHttp框架中也能看到策略模式的身影，比如下面这个方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class OkHttpClient implements Cloneable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public OkHttpClient setAuthenticator(Authenticator authenticator) &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.authenticator = authenticator;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return this;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface Authenticator &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Request authenticate(Proxy proxy, Response response) throws IOException; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Request authenticateProxy(Proxy proxy, Response response) throws IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-nd/3.0/cn/88x31.png&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;本作品采用&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;凯子哥到新公司入职的第一天，就被老板交到了办公室。&lt;/p&gt;
&lt;p&gt;老板说：“凯子啊，听说你最近在研究设计模式呀，有什么收获吗？”&lt;/p&gt;
&lt;p&gt;凯子说：“刚把《Head First设计模式》看了一遍，之前还看过《Android设计模式解析与实战》，多多少少知道一些。”&lt;/p&gt;
&lt;p&gt;老板说：“挺好学的呀，这两本书都挺不错的，既然都看过了，今天给你一个新需求，你帮我实现下吧！”&lt;/p&gt;
&lt;p&gt;凯子高兴的说：“好啊，正好可以练练手！能把需求具体说下吗？”&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaizige.vip/categories/Android/"/>
    
    
      <category term="Android" scheme="http://kaizige.vip/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>如何解决Markdown本地图片的保存问题？</title>
    <link href="http://kaizige.vip/2016/06/26/how-to-save-blog-image/"/>
    <id>http://kaizige.vip/2016/06/26/how-to-save-blog-image/</id>
    <published>2016-06-26T11:37:32.000Z</published>
    <updated>2016-06-26T13:24:43.000Z</updated>
    
    <content type="html">&lt;p&gt;如果要使用独立Blog，一个要解决的重要问题就是如何保存图片。之前在CSDN写Blog的时候，使用的是国内的免费图床，但是突然有一天，一个图床因为涉黄被封，造成文章中很多重要的图片丢失，再也找不回来了。&lt;/p&gt;
&lt;p&gt;那么，如何才能更安全、方便的保存我们Markdown文件中的图片呢？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用哪个图床？&quot;&gt;&lt;a href=&quot;#使用哪个图床？&quot; class=&quot;headerlink&quot; title=&quot;使用哪个图床？&quot;&gt;&lt;/a&gt;使用哪个图床？&lt;/h1&gt;&lt;p&gt;七牛算是国内做的比较好的图片存储服务了，对于注册用户，七牛提供10G免费网络存储和10G的月下载流量，对于个人技术Blog来说，完全足够。所以我的Blog采用的是七牛的免费图片服务。&lt;/p&gt;
&lt;p&gt;对于那些不需要注册，免费上传图片的图床要小心了，因为监管不严，说不定哪天就挂掉，你整理的很多宝贵资料就灰飞烟灭了，所以选择一个比较成熟的第三方厂商是非常重要的！&lt;/p&gt;
&lt;h1 id=&quot;如何更方便的解决本地图片保存问题&quot;&gt;&lt;a href=&quot;#如何更方便的解决本地图片保存问题&quot; class=&quot;headerlink&quot; title=&quot;如何更方便的解决本地图片保存问题&quot;&gt;&lt;/a&gt;如何更方便的解决本地图片保存问题&lt;/h1&gt;&lt;p&gt;使用Markdown写Blog非常方便，为了图文并茂，我们经常需要截图来说明问题，那么本地的图片怎么更好的保存呢？&lt;/p&gt;
&lt;p&gt;我之前写Blog的流程是，如果需要图片，就截图，然后手动上传到免费图床，获取到Url之后，直接填写到内容中，这里就存在两个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图床是随意选择的，出了问题找不到人解决&lt;/li&gt;
&lt;li&gt;每次截图都需要截图、上传、复制粘贴三个步骤，很繁琐，思绪容易被打断&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决这个问题，我写了&lt;a href=&quot;https://github.com/ZhaoKaiQiang/MdImageResolver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MdImageResolver&lt;/a&gt;这个项目。&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h1&gt;&lt;p&gt;其实解决思路很简单，就是写的时候，使用本地的图片，写完之后，自动解析本地的图片，然后自动上传到七牛的云服务，最后将获得的图片地址替换本地地址，完成内容的解析。&lt;/p&gt;
&lt;p&gt;因为代码比较简单，所以这里只介绍使用方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到&lt;a href=&quot;https://github.com/ZhaoKaiQiang/MdImageResolver/tree/master/release&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载jar包&lt;/li&gt;
&lt;li&gt;java -jar file_name 开始运行jar包&lt;/li&gt;
&lt;li&gt;第一次使用的时候需要输入相关信息，具体信息下面介绍&lt;/li&gt;
&lt;li&gt;选择保存模式，一种是覆盖模式，会替换原内容；一种是备份模式，会创建新的文件保存，文件名=原文件名_bak&lt;/li&gt;
&lt;li&gt;自动完成解析、上传、替换、保存步骤&lt;/li&gt;
&lt;li&gt;结束&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;必要信息&quot;&gt;&lt;a href=&quot;#必要信息&quot; class=&quot;headerlink&quot; title=&quot;必要信息&quot;&gt;&lt;/a&gt;必要信息&lt;/h1&gt;&lt;p&gt;一共有四个信息需要提供，填写一次之后，会自动保存在jar所在路径的local.properties文件中，你可以直接修改这个文件。数据格式是json。&lt;/p&gt;
&lt;p&gt;access key 和secret key在&lt;a href=&quot;https://portal.qiniu.com/user/key&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;密钥管理&lt;/a&gt;界面获得&lt;/p&gt;
&lt;p&gt;bucket name 就是创建的存储空间的名字&lt;/p&gt;
&lt;p&gt;domain 指的是测试域名，在空间详情页可以看到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8l7jwurv.bkt.clouddn.com/QQ20160626-0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h1&gt;&lt;p&gt;项目托管在&lt;a href=&quot;https://github.com/ZhaoKaiQiang/MdImageResolver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;，欢迎follow，star!&lt;/p&gt;
&lt;p&gt;这篇文章中的配图就是用这个工具完成的，用起来还不错哦~&lt;/p&gt;
&lt;h1 id=&quot;参考资料及版权声明&quot;&gt;&lt;a href=&quot;#参考资料及版权声明&quot; class=&quot;headerlink&quot; title=&quot;参考资料及版权声明&quot;&gt;&lt;/a&gt;参考资料及版权声明&lt;/h1&gt;&lt;p&gt;&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-nd/3.0/cn/88x31.png&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;本文章采用&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果要使用独立Blog，一个要解决的重要问题就是如何保存图片。之前在CSDN写Blog的时候，使用的是国内的免费图床，但是突然有一天，一个图床因为涉黄被封，造成文章中很多重要的图片丢失，再也找不回来了。&lt;/p&gt;
&lt;p&gt;那么，如何才能更安全、方便的保存我们Markdown文件中的图片呢？&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kaizige.vip/categories/Java/"/>
    
    
      <category term="Util" scheme="http://kaizige.vip/tags/Util/"/>
    
      <category term="Java" scheme="http://kaizige.vip/tags/Java/"/>
    
      <category term="Markdown" scheme="http://kaizige.vip/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Android专用Log打印工具KLog使用指南</title>
    <link href="http://kaizige.vip/2016/06/13/klog/"/>
    <id>http://kaizige.vip/2016/06/13/klog/</id>
    <published>2016-06-13T15:43:48.000Z</published>
    <updated>2016-06-14T15:02:23.000Z</updated>
    
    <content type="html">&lt;p&gt;在Android开发和调试的过程中，Log的使用是非常频繁的，一个好的Log工具可以帮你节省很多时间，所以凯子哥抽空写了个这个开源项目&lt;a href=&quot;https://github.com/ZhaoKaiQiang/KLog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KLog&lt;/a&gt;，希望可以帮助大家提高开发效率。&lt;/p&gt;
&lt;p&gt;本文章是KLog的项目介绍和使用说明。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;KLog功能介绍&quot;&gt;&lt;a href=&quot;#KLog功能介绍&quot; class=&quot;headerlink&quot; title=&quot;KLog功能介绍&quot;&gt;&lt;/a&gt;KLog功能介绍&lt;/h1&gt;&lt;p&gt;KLog最新版本号为1.5.0。&lt;/p&gt;
&lt;p&gt;以下是最新版本KLog拥有的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持显示行号&lt;/li&gt;
&lt;li&gt;支持显示Log所在函数名称&lt;/li&gt;
&lt;li&gt;支持无Tag快捷打印&lt;/li&gt;
&lt;li&gt;支持在Android Studio开发IDE中，点击函数名称，跳转至Log所在位置&lt;/li&gt;
&lt;li&gt;支持JSON字符串解析打印&lt;/li&gt;
&lt;li&gt;支持XML字符串解析打印&lt;/li&gt;
&lt;li&gt;支持Log信息存储到文件&lt;/li&gt;
&lt;li&gt;依赖库非常小，只有不到10K&lt;/li&gt;
&lt;li&gt;支持无限长字符串打印，无Logcat4000字符限制&lt;/li&gt;
&lt;li&gt;支持变长参数，任意个数打印参数&lt;/li&gt;
&lt;li&gt;支持设置全局Tag&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;KLog使用三千问&quot;&gt;&lt;a href=&quot;#KLog使用三千问&quot; class=&quot;headerlink&quot; title=&quot;KLog使用三千问&quot;&gt;&lt;/a&gt;KLog使用三千问&lt;/h1&gt;&lt;h2 id=&quot;我想快速观察某处代码有没有执行怎么办？&quot;&gt;&lt;a href=&quot;#我想快速观察某处代码有没有执行怎么办？&quot; class=&quot;headerlink&quot; title=&quot;我想快速观察某处代码有没有执行怎么办？&quot;&gt;&lt;/a&gt;我想快速观察某处代码有没有执行怎么办？&lt;/h2&gt;&lt;p&gt;直接KLog.d()，不需要设置Tag，不需要输入任何字符串信息，就可以自动打印&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:32:05.889 19851-19851/com.socks.klog.sample V/Kai: [ (MainActivity.java:68)#Log ] execute&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;我想把整个App的Tag都设置成一个怎么办？&quot;&gt;&lt;a href=&quot;#我想把整个App的Tag都设置成一个怎么办？&quot; class=&quot;headerlink&quot; title=&quot;我想把整个App的Tag都设置成一个怎么办？&quot;&gt;&lt;/a&gt;我想把整个App的Tag都设置成一个怎么办？&lt;/h2&gt;&lt;p&gt;初始化的时候使用这个函数来设置全局的Tag，就可以通过Tag过滤出整个App的Log了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KLog.init(BuildConfig.LOG_DEBUG, &amp;quot;Kai&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;我想自己设置每个Log的Tag怎么办？&quot;&gt;&lt;a href=&quot;#我想自己设置每个Log的Tag怎么办？&quot; class=&quot;headerlink&quot; title=&quot;我想自己设置每个Log的Tag怎么办？&quot;&gt;&lt;/a&gt;我想自己设置每个Log的Tag怎么办？&lt;/h2&gt;&lt;p&gt;和使用Log一样，只是需要用KLog来完成而已&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KLog.d(TAG, LOG_MSG);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;我要打印的字符串非常长，系统自带的Log只能显示一部分怎么办？&quot;&gt;&lt;a href=&quot;#我要打印的字符串非常长，系统自带的Log只能显示一部分怎么办？&quot; class=&quot;headerlink&quot; title=&quot;我要打印的字符串非常长，系统自带的Log只能显示一部分怎么办？&quot;&gt;&lt;/a&gt;我要打印的字符串非常长，系统自带的Log只能显示一部分怎么办？&lt;/h2&gt;&lt;p&gt;KLog会对超长字符串进行处理，保证全部的字符串都可以打印出来，再也没有了只能打印一部分的问题了~&lt;/p&gt;
&lt;h2 id=&quot;我要输出的格式是Json的，我想打印出Json格式怎么办&quot;&gt;&lt;a href=&quot;#我要输出的格式是Json的，我想打印出Json格式怎么办&quot; class=&quot;headerlink&quot; title=&quot;我要输出的格式是Json的，我想打印出Json格式怎么办&quot;&gt;&lt;/a&gt;我要输出的格式是Json的，我想打印出Json格式怎么办&lt;/h2&gt;&lt;p&gt;直接&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KLog.json(JSON);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就可以自动的将Json格式输出&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.042 19851-19851/com.socks.klog.sample D/Kai: ╔═══════════════════════════════════════════════════════════════════════════════════════&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.042 19851-19851/com.socks.klog.sample D/Kai: ║ [ (MainActivity.java:120)#LogWithJson ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║     &amp;quot;menu&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║         &amp;quot;泰式柠檬肉片&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║         &amp;quot;鸡柳汉堡&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║         &amp;quot;蒸桂鱼卷 &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║     ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║     &amp;quot;tag&amp;quot;: &amp;quot;其他&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ║ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:37:43.043 19851-19851/com.socks.klog.sample D/Kai: ╚═══════════════════════════════════════════════════════════════════════════════════════&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;我想输出XML格式呢？&quot;&gt;&lt;a href=&quot;#我想输出XML格式呢？&quot; class=&quot;headerlink&quot; title=&quot;我想输出XML格式呢？&quot;&gt;&lt;/a&gt;我想输出XML格式呢？&lt;/h2&gt;&lt;p&gt;一样简单，只需要&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KLog.xml(XML);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就可以输出XML格式了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.629 19851-19851/com.socks.klog.sample D/Kai: ╔═══════════════════════════════════════════════════════════════════════════════════════&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.629 19851-19851/com.socks.klog.sample D/Kai: ║ [ (MainActivity.java:140)#LogWithXml ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.629 19851-19851/com.socks.klog.sample D/Kai: ║ &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.629 19851-19851/com.socks.klog.sample D/Kai: ║ &amp;lt;!--  Copyright w3school.com.cn --&amp;gt;&amp;lt;note&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.630 19851-19851/com.socks.klog.sample D/Kai: ║   &amp;lt;to&amp;gt;George&amp;lt;/to&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.630 19851-19851/com.socks.klog.sample D/Kai: ║   &amp;lt;from&amp;gt;John&amp;lt;/from&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.630 19851-19851/com.socks.klog.sample D/Kai: ║   &amp;lt;heading&amp;gt;Reminder&amp;lt;/heading&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.630 19851-19851/com.socks.klog.sample D/Kai: ║   &amp;lt;body&amp;gt;Don&amp;apos;t forget the meeting!&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.630 19851-19851/com.socks.klog.sample D/Kai: ║ &amp;lt;/note&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:38:34.630 19851-19851/com.socks.klog.sample D/Kai: ╚═══════════════════════════════════════════════════════════════════════════════════════&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;我有一段字符串需要处理，能自动保存到文件吗？&quot;&gt;&lt;a href=&quot;#我有一段字符串需要处理，能自动保存到文件吗？&quot; class=&quot;headerlink&quot; title=&quot;我有一段字符串需要处理，能自动保存到文件吗？&quot;&gt;&lt;/a&gt;我有一段字符串需要处理，能自动保存到文件吗？&lt;/h2&gt;&lt;p&gt;当然可以，只需要&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KLog.file(TAG, Environment.getExternalStorageDirectory(), &amp;quot;test.txt&amp;quot;, JSON_LONG);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就可以保存了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;06-14 22:40:19.418 19851-19851/com.socks.klog.sample D/Kai: [ (MainActivity.java:134)#LogWithFile ]  save log success ! location is &amp;gt;&amp;gt;&amp;gt;/storage/emulated/0/test.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;KLog这么强大，会不会占用很大的空间？&quot;&gt;&lt;a href=&quot;#KLog这么强大，会不会占用很大的空间？&quot; class=&quot;headerlink&quot; title=&quot;KLog这么强大，会不会占用很大的空间？&quot;&gt;&lt;/a&gt;KLog这么强大，会不会占用很大的空间？&lt;/h2&gt;&lt;p&gt;Klog依赖包只有10K大小，只需要10K，就可以满足你日常打印Log的需求，超值！&lt;/p&gt;
&lt;h2 id=&quot;我想用KLog，应该怎么办呢？&quot;&gt;&lt;a href=&quot;#我想用KLog，应该怎么办呢？&quot; class=&quot;headerlink&quot; title=&quot;我想用KLog，应该怎么办呢？&quot;&gt;&lt;/a&gt;我想用KLog，应该怎么办呢？&lt;/h2&gt;&lt;p&gt;最简单的方法，你可以直接使用gradle引用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.github.zhaokaiqiang.klog:library:1.5.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，在项目里面也提供了KLog.jar，你也可以直接拷贝到你的项目里使用。&lt;/p&gt;
&lt;h2 id=&quot;使用KLog的过程中，有没有最佳实践？&quot;&gt;&lt;a href=&quot;#使用KLog的过程中，有没有最佳实践？&quot; class=&quot;headerlink&quot; title=&quot;使用KLog的过程中，有没有最佳实践？&quot;&gt;&lt;/a&gt;使用KLog的过程中，有没有最佳实践？&lt;/h2&gt;&lt;p&gt;当然有，下面就介绍几个最佳实践。&lt;/p&gt;
&lt;p&gt;请在Application初始化的时候就对KLog进行初始化，因为KLog的初始化过程非常的简单，因此不会影响App的启动速度&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class KLogApplication extends Application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onCreate() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onCreate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KLog.init(BuildConfig.LOG_DEBUG, &amp;quot;Kai&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于全局打印开关，推荐使用Gradle变量进行控制，这样当发布release版本的时候，就会自动的关闭Log的输出，防止信息的泄露和影响效率。&lt;/p&gt;
&lt;p&gt;具体的设置方法如下：&lt;/p&gt;
&lt;p&gt;首先在BuildConfig中添加自定义字段。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public final class BuildConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public static final boolean LOG_DEBUG = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在主项目的gradle中添加变量LOG_DEBUG，并且在debug和release下分别设置不同的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android {

    buildTypes {

        debug {
            buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;LOG_DEBUG&amp;quot;, &amp;quot;true&amp;quot;
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;
        }

        release {
            buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;LOG_DEBUG&amp;quot;, &amp;quot;false&amp;quot;
            minifyEnabled true
            proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样当发布release版本的时候就会自动关闭Log的输出。&lt;/p&gt;
&lt;p&gt;如果想在release版本中也打印Log，只需要修改release括号内的LOG_DEBUG为true就可以了。&lt;/p&gt;
&lt;h2 id=&quot;如何设置不同等级的Log颜色&quot;&gt;&lt;a href=&quot;#如何设置不同等级的Log颜色&quot; class=&quot;headerlink&quot; title=&quot;如何设置不同等级的Log颜色&quot;&gt;&lt;/a&gt;如何设置不同等级的Log颜色&lt;/h2&gt;&lt;p&gt;另外，为了Log更好的查看效果，可以为不同的Log等级设置不同的颜色，这样便于Log的观看。&lt;/p&gt;
&lt;p&gt;如下，需要“Save as”保存主题，然后取消“use inherited attributes”，即可设置自己想要的颜色&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8l7jwurv.bkt.clouddn.com/QQ20160614-0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我的配色方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A=FF2E0E&lt;/li&gt;
&lt;li&gt;D=38F838&lt;/li&gt;
&lt;li&gt;E=FF6B68&lt;/li&gt;
&lt;li&gt;I=1DBB92&lt;/li&gt;
&lt;li&gt;V=FFF7EE&lt;/li&gt;
&lt;li&gt;W=FF9229&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打印效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8l7jwurv.bkt.clouddn.com/QQ20160614-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h1&gt;&lt;p&gt;请点击&lt;a href=&quot;https://github.com/ZhaoKaiQiang/KLog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，欢迎star和follow，以及提交issue和pull request。&lt;/p&gt;
&lt;p&gt;本开源库的部分灵感来自于&lt;a href=&quot;https://github.com/orhanobut/logger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Logger&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-nd/3.0/cn/88x31.png&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;本作品采用&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Android开发和调试的过程中，Log的使用是非常频繁的，一个好的Log工具可以帮你节省很多时间，所以凯子哥抽空写了个这个开源项目&lt;a href=&quot;https://github.com/ZhaoKaiQiang/KLog&quot;&gt;KLog&lt;/a&gt;，希望可以帮助大家提高开发效率。&lt;/p&gt;
&lt;p&gt;本文章是KLog的项目介绍和使用说明。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaizige.vip/categories/Android/"/>
    
    
      <category term="Android" scheme="http://kaizige.vip/tags/Android/"/>
    
      <category term="KLog" scheme="http://kaizige.vip/tags/KLog/"/>
    
      <category term="Log" scheme="http://kaizige.vip/tags/Log/"/>
    
      <category term="Util" scheme="http://kaizige.vip/tags/Util/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建免费的个人技术博客</title>
    <link href="http://kaizige.vip/2016/06/10/how-to-build-up-yourself-hexo-blog/"/>
    <id>http://kaizige.vip/2016/06/10/how-to-build-up-yourself-hexo-blog/</id>
    <published>2016-06-10T15:23:09.000Z</published>
    <updated>2016-06-11T14:19:00.000Z</updated>
    
    <content type="html">&lt;p&gt;当初一起学习Android开发的朋友们，你们还好吗？在消失了半年的时间之后，我——凯子哥，又出现了~&lt;/p&gt;
&lt;p&gt;首先要说声抱歉，前段时间因为刚转战到一个初创公司，作为核心的开发人员，工作时间一直维持在9106——早9晚10一周六天——的节奏，每天回到家已经是身心疲惫，博文更新的进度一度中断。最近总算是有了点改善，因此准备恢复技术博客的更新进度，但是毕竟是创业公司，更新的进度不敢保证，无论如何，是时候总结一下这段时间在技术上的成长了！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以前一直在CSDN发布文章，这次我准备恢复我的个人博客。为什么叫恢复呢？因为之前用Hexo+Github维护过一个技术博客，但是CSDN相对而言更容易维护一些，而且人气更旺一点，所以个人博客一直在搁置状态。但是，我已经被CSDN博客糟糕的用户体验和各种BUG折磨的失去了信心，留言板和评论的各种BUG在几年间还没有修复完全，因此这次就直接自己动手，丰衣足食吧！&lt;/p&gt;
&lt;p&gt;当然，除了这个原因之外，还有一个很重要的因素，就是之前的文章关于Android的初级知识比较多，随着开发经验的增长，在新的博客里面，我想更多的分享一些更高级的开发知识和开发经验，也算是一个技术的分水岭，欢迎各位朋友指导与交流！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hexo的搭建过程请参考官方文档：&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/docs/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;遇到的一些常见问题请参考Github项目主页：&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hexojs/hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;预览和更换博客Theme请参考&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/themes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maupassant主题介绍请参考：&lt;a href=&quot;https://www.haomwei.com/technology/maupassant-hexo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.haomwei.com/technology/maupassant-hexo.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本博客使用的是Maupassant主题，简洁大方，在各个平台上的UI适配性都不错，感觉Maupassant主题&lt;a href=&quot;https://github.com/tufu9441/maupassant-hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开发者&lt;/a&gt;的付出！&lt;/p&gt;
&lt;p&gt;好了，下面介绍一下本博客搭建过程中遇到的一些问题和解决方案。&lt;/p&gt;
&lt;h1 id=&quot;Hexo的目录结构&quot;&gt;&lt;a href=&quot;#Hexo的目录结构&quot; class=&quot;headerlink&quot; title=&quot;Hexo的目录结构&quot;&gt;&lt;/a&gt;Hexo的目录结构&lt;/h1&gt;&lt;p&gt;当你按照官方的指导文档把项目安装到本地之后，就可以看到如下的项目目录结构，熟悉每一个目录结构的功能有利于下面的功能扩展和BUG排查。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8l7jwurv.bkt.clouddn.com/QQ20160611-0@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体每个文件夹的用途在&lt;a href=&quot;https://hexo.io/zh-cn/docs/setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;中有详细的介绍，这里不再赘述。&lt;/p&gt;
&lt;p&gt;需要注意的是，_config.yml是全局配置，每个Theme独有的特性设置请在themes文件夹里面对应的主题配置文件进行修改。&lt;/p&gt;
&lt;p&gt;_config.yml采用的是YAML文件格式，数据采用key:value的格式，有一点需要注意的是，key和value之间必须有一个空格，否则会导致格式不正确。&lt;/p&gt;
&lt;p&gt;关于各个目录文件的使用注意会在下面的内容中给出。&lt;/p&gt;
&lt;h1 id=&quot;关于主题的设置&quot;&gt;&lt;a href=&quot;#关于主题的设置&quot; class=&quot;headerlink&quot; title=&quot;关于主题的设置&quot;&gt;&lt;/a&gt;关于主题的设置&lt;/h1&gt;&lt;p&gt;更换Hexo的主题非常简单，将项目clone到&lt;strong&gt;themes&lt;/strong&gt;文件夹，然后将根目录下_config.yml得theme切换为新的主题的名字即可。&lt;/p&gt;
&lt;p&gt;除此之外，每种主题都可以自由的配置一些参数和特性，修改特定主题的属性时，需要修改主题所在文件夹下的配置文件&lt;strong&gt;_config.yml&lt;/strong&gt;，注意区别于根目录下的全局配置文件。&lt;/p&gt;
&lt;h1 id=&quot;文章模板&quot;&gt;&lt;a href=&quot;#文章模板&quot; class=&quot;headerlink&quot; title=&quot;文章模板&quot;&gt;&lt;/a&gt;文章模板&lt;/h1&gt;&lt;p&gt;当使用hexo new生成新的文章文件的时候，会默认采用模板文章，在模板文件中，可以自定义Front-matter属性，进行自定义的配置。&lt;/p&gt;
&lt;p&gt;我的默认模板如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8l7jwurv.bkt.clouddn.com/QQ20160611-1@2x.png&quot; width=&quot;400/&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;p&gt;hexo自带的命令非常简洁，学习起来也很简单。&lt;/p&gt;
&lt;p&gt;常用的命令就下面几个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo new title 生成一篇名为“title”的新文章，采用默认的模板&lt;/li&gt;
&lt;li&gt;hexo g 重新渲染Blog&lt;/li&gt;
&lt;li&gt;hexo s 启动本地服务器，默认采用的网文地址是：&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;,可以用来本地测试&lt;/li&gt;
&lt;li&gt;hexo d 将本地public目录下的文件内容提交到Github，具体的项目地址在_config.yml设置&lt;/li&gt;
&lt;li&gt;hexo clean 清空本地的缓存文件db.json和已生成的静态文件public&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，一个正常的工作流是这样的：hexo new一篇模板文章，写作完成后，hexo g进行渲染，hexo s在本地试运行，本地测试没问题后，hexo d将生成的内容部署到Github对应的项目地址，完成文章的发表。&lt;/p&gt;
&lt;h1 id=&quot;使用Maupassant主题过程中的坑&quot;&gt;&lt;a href=&quot;#使用Maupassant主题过程中的坑&quot; class=&quot;headerlink&quot; title=&quot;使用Maupassant主题过程中的坑&quot;&gt;&lt;/a&gt;使用Maupassant主题过程中的坑&lt;/h1&gt;&lt;p&gt;下面是在使用Maupassant主题时遇到的几个问题&lt;/p&gt;
&lt;h2 id=&quot;开启了TOC不显示目录&quot;&gt;&lt;a href=&quot;#开启了TOC不显示目录&quot; class=&quot;headerlink&quot; title=&quot;开启了TOC不显示目录&quot;&gt;&lt;/a&gt;开启了TOC不显示目录&lt;/h2&gt;&lt;p&gt;在Maupassant主题中，可以通过toc来设置显示目录结构，这是我比较喜欢的Feature。但是只支持使用“===”和“—”作为标题等级的识别符，不支持使用“#”方式。&lt;/p&gt;
&lt;h2 id=&quot;npm-install-hexo-renderer-sass出现问题&quot;&gt;&lt;a href=&quot;#npm-install-hexo-renderer-sass出现问题&quot; class=&quot;headerlink&quot; title=&quot;npm install hexo-renderer-sass出现问题&quot;&gt;&lt;/a&gt;npm install hexo-renderer-sass出现问题&lt;/h2&gt;&lt;p&gt;如果这一步出现问题，那么就会出现修改了主题以后，界面没有样式的问题，修复方法就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm uninstall hexo-renderer-sass –save 将sass卸载&lt;/li&gt;
&lt;li&gt;安装cpnm，具体安装方法自行搜索&lt;/li&gt;
&lt;li&gt;使用cnpm install hexo-renderer-sass –save 重新安装saas即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;部署时CNAME文件被删除&quot;&gt;&lt;a href=&quot;#部署时CNAME文件被删除&quot; class=&quot;headerlink&quot; title=&quot;部署时CNAME文件被删除&quot;&gt;&lt;/a&gt;部署时CNAME文件被删除&lt;/h2&gt;&lt;p&gt;如果你想绑定个人域名的话，就需要完成CNAME解析，在项目的根目录放置CNAME文件，但是直接在Github项目的根目录添加文件，在下次更新的时候，会自定删除CNAME文件，因为每次public文件都是再次生成的，CNAME文件会丢失。&lt;/p&gt;
&lt;p&gt;解决方案就是将CNAME文件放置在根目录source文件夹里面，在生成public文件的时候，hexo会自动将CNAME文件拷贝过去。&lt;/p&gt;
&lt;h2 id=&quot;添加百度统计&quot;&gt;&lt;a href=&quot;#添加百度统计&quot; class=&quot;headerlink&quot; title=&quot;添加百度统计&quot;&gt;&lt;/a&gt;添加百度统计&lt;/h2&gt;&lt;p&gt;如果你想添加统计工具，观察每天博客的流量情况，那么就可以申请百度统计，把申请得到的id填写在themes/maupassant/_config.yml对应位置即可。&lt;/p&gt;
&lt;h2 id=&quot;添加Disqus评论&quot;&gt;&lt;a href=&quot;#添加Disqus评论&quot; class=&quot;headerlink&quot; title=&quot;添加Disqus评论&quot;&gt;&lt;/a&gt;添加Disqus评论&lt;/h2&gt;&lt;p&gt;相对多说来说，我更喜欢Disqus，如果要使用Disqus，需要去官网申请开通。然后将开通时设置的user_name配置到themes/maupassant/_config.yml即可。开通地址请戳：&lt;a href=&quot;https://disqus.com/admin/create/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://disqus.com/admin/create/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加RSS订阅&quot;&gt;&lt;a href=&quot;#添加RSS订阅&quot; class=&quot;headerlink&quot; title=&quot;添加RSS订阅&quot;&gt;&lt;/a&gt;添加RSS订阅&lt;/h2&gt;&lt;p&gt;使用下面的代码可以为Blog添加RSS订阅&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，如果遇到如下错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FATAL (unknown path) [Line 7, Column 23]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Error: Unable to call `the return value of (posts[&amp;quot;first&amp;quot;])[&amp;quot;updated&amp;quot;][&amp;quot;toISOStrin&amp;quot;]`, which is undefined or falsey&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有可能造成这个问题的原因是你把source/_post下面的文章都都删了，所以在生成RSS的过程中就会报错，解决方案就是至少保证有一片文章，然后在使用上面的命令安装RSS组件&lt;/p&gt;
&lt;h1 id=&quot;参考资料及版权声明&quot;&gt;&lt;a href=&quot;#参考资料及版权声明&quot; class=&quot;headerlink&quot; title=&quot;参考资料及版权声明&quot;&gt;&lt;/a&gt;参考资料及版权声明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rockcoding.com/2016/03/02/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用hexo时遇到的小坑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.haomwei.com/technology/maupassant-hexo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大道至简——Hexo简洁主题推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官方中文网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bitbug.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线制作ico图标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fanyangkong.github.io/2016/03/06/%E8%81%8A%E8%81%8AHexo%E4%B8%8Enext/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;聊聊Hexo与next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool&amp;amp;utm_medium=referralaio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo你的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-nd/3.0/cn/88x31.png&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;本作品采用&lt;a rel=&quot;external&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot; target=&quot;_blank&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当初一起学习Android开发的朋友们，你们还好吗？在消失了半年的时间之后，我——凯子哥，又出现了~&lt;/p&gt;
&lt;p&gt;首先要说声抱歉，前段时间因为刚转战到一个初创公司，作为核心的开发人员，工作时间一直维持在9106——早9晚10一周六天——的节奏，每天回到家已经是身心疲惫，博文更新的进度一度中断。最近总算是有了点改善，因此准备恢复技术博客的更新进度，但是毕竟是创业公司，更新的进度不敢保证，无论如何，是时候总结一下这段时间在技术上的成长了！&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://kaizige.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Hexo" scheme="http://kaizige.vip/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://kaizige.vip/tags/Blog/"/>
    
  </entry>
  
</feed>
